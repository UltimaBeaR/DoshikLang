//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Programs\DoshikLang\DoshikLangAntlr\DoshikParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class DoshikParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWCONST=1, NEW=2, EVENT=3, PRIVATE=4, PUBLIC=5, OUT=6, IF=7, ELSE=8, 
		WHILE=9, FOR=10, BREAK=11, CONTINUE=12, RETURN=13, INT=14, FLOAT=15, BOOL=16, 
		STRING=17, VOID=18, INT_LITERAL=19, INT_HEX_LITERAL=20, FLOAT_LITERAL=21, 
		BOOL_LITERAL=22, STRING_LITERAL=23, NULL_LITERAL=24, OPEN_PARENTHESIS=25, 
		CLOSE_PARENTHESIS=26, OPEN_BRACE=27, CLOSE_BRACE=28, OPEN_BRACKET=29, 
		CLOSE_BRACKET=30, SEMICOLON=31, COMMA=32, DOT=33, ASSIGN=34, ADD_ASSIGN=35, 
		SUB_ASSIGN=36, MUL_ASSIGN=37, DIV_ASSIGN=38, MOD_ASSIGN=39, GT=40, LT=41, 
		BANG=42, QUESTION=43, COLON=44, EQUAL=45, LE=46, GE=47, NOTEQUAL=48, AND=49, 
		OR=50, INC=51, DEC=52, ADD=53, SUB=54, MUL=55, DIV=56, MOD=57, WHITESPACE=58, 
		MULTILINE_COMMENT=59, COMMENT=60, IDENTIFIER=61;
	public const int
		RULE_compilationUnit = 0, RULE_memberDeclaration = 1, RULE_methodDeclaration = 2, 
		RULE_typeTypeOrVoid = 3, RULE_fieldDeclaration = 4, RULE_variableDeclarators = 5, 
		RULE_variableDeclarator = 6, RULE_variableDeclaratorId = 7, RULE_variableInitializer = 8, 
		RULE_arrayInitializer = 9, RULE_classOrInterfaceType = 10, RULE_typeArgument = 11, 
		RULE_formalParameters = 12, RULE_formalParameterList = 13, RULE_formalParameter = 14, 
		RULE_literal = 15, RULE_integerLiteral = 16, RULE_block = 17, RULE_blockStatement = 18, 
		RULE_localVariableDeclaration = 19, RULE_statement = 20, RULE_forControl = 21, 
		RULE_forInit = 22, RULE_enhancedForControl = 23, RULE_parExpression = 24, 
		RULE_expressionList = 25, RULE_methodCall = 26, RULE_methodCallParams = 27, 
		RULE_methodCallParam = 28, RULE_newCall = 29, RULE_newConstCall = 30, 
		RULE_newConstCallParams = 31, RULE_newConstCallParam = 32, RULE_constExpression = 33, 
		RULE_constArrayInitializer = 34, RULE_expression = 35, RULE_primary = 36, 
		RULE_typeType = 37, RULE_primitiveType = 38, RULE_typeArguments = 39;
	public static readonly string[] ruleNames = {
		"compilationUnit", "memberDeclaration", "methodDeclaration", "typeTypeOrVoid", 
		"fieldDeclaration", "variableDeclarators", "variableDeclarator", "variableDeclaratorId", 
		"variableInitializer", "arrayInitializer", "classOrInterfaceType", "typeArgument", 
		"formalParameters", "formalParameterList", "formalParameter", "literal", 
		"integerLiteral", "block", "blockStatement", "localVariableDeclaration", 
		"statement", "forControl", "forInit", "enhancedForControl", "parExpression", 
		"expressionList", "methodCall", "methodCallParams", "methodCallParam", 
		"newCall", "newConstCall", "newConstCallParams", "newConstCallParam", 
		"constExpression", "constArrayInitializer", "expression", "primary", "typeType", 
		"primitiveType", "typeArguments"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'new'", "'event'", "'private'", "'public'", "'out'", "'if'", 
		"'else'", "'while'", "'for'", "'break'", "'continue'", "'return'", "'int'", 
		"'float'", "'bool'", "'string'", "'void'", null, null, null, null, null, 
		"'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'>'", "'<'", "'!'", "'?'", 
		"':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
		"'+'", "'-'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWCONST", "NEW", "EVENT", "PRIVATE", "PUBLIC", "OUT", "IF", "ELSE", 
		"WHILE", "FOR", "BREAK", "CONTINUE", "RETURN", "INT", "FLOAT", "BOOL", 
		"STRING", "VOID", "INT_LITERAL", "INT_HEX_LITERAL", "FLOAT_LITERAL", "BOOL_LITERAL", 
		"STRING_LITERAL", "NULL_LITERAL", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "SEMICOLON", 
		"COMMA", "DOT", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "GT", "LT", "BANG", "QUESTION", "COLON", "EQUAL", "LE", 
		"GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", 
		"MOD", "WHITESPACE", "MULTILINE_COMMENT", "COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DoshikParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DoshikParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DoshikParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DoshikParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(DoshikParser.Eof, 0); }
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EVENT) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << VOID) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 80; memberDeclaration();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_memberDeclaration);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; methodDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; fieldDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public TypeTypeOrVoidContext returnType;
		public IToken methodName;
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public ITerminalNode EVENT() { return GetToken(DoshikParser.EVENT, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVENT) {
				{
				State = 92; Match(EVENT);
				}
			}

			State = 95; _localctx.returnType = typeTypeOrVoid();
			State = 96; _localctx.methodName = Match(IDENTIFIER);
			State = 97; formalParameters();
			State = 98; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(DoshikParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTypeOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeTypeOrVoid);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public ITerminalNode PUBLIC() { return GetToken(DoshikParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(DoshikParser.PRIVATE, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE || _la==PUBLIC) {
				{
				State = 104;
				_la = TokenStream.LA(1);
				if ( !(_la==PRIVATE || _la==PUBLIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 107; typeType();
			State = 108; variableDeclarators();
			State = 109; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; variableDeclarator();
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 112; Match(COMMA);
				State = 113; variableDeclarator();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(DoshikParser.ASSIGN, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; variableDeclaratorId();
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 120; Match(ASSIGN);
				State = 121; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableDeclaratorId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableInitializer);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126; arrayInitializer();
				}
				break;
			case NEWCONST:
			case NEW:
			case INT_LITERAL:
			case INT_HEX_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case OPEN_PARENTHESIS:
			case BANG:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(DoshikParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(DoshikParser.CLOSE_BRACE, 0); }
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 18, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(OPEN_BRACE);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << NEW) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << OPEN_BRACE) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 131; variableInitializer();
				State = 136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 132; Match(COMMA);
						State = 133; variableInitializer();
						}
						} 
					}
					State = 138;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 139; Match(COMMA);
					}
				}

				}
			}

			State = 144; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DoshikParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DoshikParser.IDENTIFIER, i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(DoshikParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(DoshikParser.DOT, i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(IDENTIFIER);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 147; typeArguments();
				}
			}

			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 150; Match(DOT);
				State = 151; Match(IDENTIFIER);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 152; typeArguments();
					}
				}

				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; typeType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(OPEN_PARENTHESIS);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OUT) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 163; formalParameterList();
				}
			}

			State = 166; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 26, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; formalParameter();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 169; Match(COMMA);
				State = 170; formalParameter();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(DoshikParser.OUT, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 28, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 176; Match(OUT);
				}
			}

			State = 179; typeType();
			State = 180; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public ITerminalNode FLOAT_LITERAL() { return GetToken(DoshikParser.FLOAT_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(DoshikParser.STRING_LITERAL, 0); }
		public ITerminalNode BOOL_LITERAL() { return GetToken(DoshikParser.BOOL_LITERAL, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(DoshikParser.NULL_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 30, RULE_literal);
		try {
			State = 187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LITERAL:
			case INT_HEX_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; integerLiteral();
				}
				break;
			case FLOAT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; Match(FLOAT_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; Match(STRING_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185; Match(BOOL_LITERAL);
				}
				break;
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186; Match(NULL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode INT_LITERAL() { return GetToken(DoshikParser.INT_LITERAL, 0); }
		public ITerminalNode INT_HEX_LITERAL() { return GetToken(DoshikParser.INT_HEX_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 32, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !(_la==INT_LITERAL || _la==INT_HEX_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(DoshikParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(DoshikParser.CLOSE_BRACE, 0); }
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(OPEN_BRACE);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << NEW) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << OPEN_BRACE) | (1L << SEMICOLON) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 192; blockStatement();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 198; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_blockStatement);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; localVariableDeclaration();
				State = 201; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_localVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; typeType();
			State = 207; variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public ExpressionContext statementExpression;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode IF() { return GetToken(DoshikParser.IF, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(DoshikParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(DoshikParser.FOR, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode WHILE() { return GetToken(DoshikParser.WHILE, 0); }
		public ITerminalNode RETURN() { return GetToken(DoshikParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(DoshikParser.BREAK, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public ITerminalNode CONTINUE() { return GetToken(DoshikParser.CONTINUE, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_statement);
		int _la;
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; _localctx.blockLabel = block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; Match(IF);
				State = 211; parExpression();
				State = 212; statement();
				State = 215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 213; Match(ELSE);
					State = 214; statement();
					}
					break;
				}
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 217; Match(FOR);
				State = 218; Match(OPEN_PARENTHESIS);
				State = 219; forControl();
				State = 220; Match(CLOSE_PARENTHESIS);
				State = 221; statement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 223; Match(WHILE);
				State = 224; parExpression();
				State = 225; statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227; Match(RETURN);
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << NEW) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 228; expression(0);
					}
				}

				State = 231; Match(SEMICOLON);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 232; Match(BREAK);
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 233; Match(IDENTIFIER);
					}
				}

				State = 236; Match(SEMICOLON);
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 237; Match(CONTINUE);
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 238; Match(IDENTIFIER);
					}
				}

				State = 241; Match(SEMICOLON);
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 8);
				{
				State = 242; Match(SEMICOLON);
				}
				break;
			case NEWCONST:
			case NEW:
			case INT_LITERAL:
			case INT_HEX_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case OPEN_PARENTHESIS:
			case BANG:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 243; _localctx.statementExpression = expression(0);
				State = 244; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ExpressionListContext forUpdate;
		public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(DoshikParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(DoshikParser.SEMICOLON, i);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 42, RULE_forControl);
		int _la;
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 248; enhancedForControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << NEW) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 249; forInit();
					}
				}

				State = 252; Match(SEMICOLON);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << NEW) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 253; expression(0);
					}
				}

				State = 256; Match(SEMICOLON);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << NEW) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 257; _localctx.forUpdate = expressionList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 44, RULE_forInit);
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 262; localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 263; expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(DoshikParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(Context, State);
		EnterRule(_localctx, 46, RULE_enhancedForControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; typeType();
			State = 267; variableDeclaratorId();
			State = 268; Match(COLON);
			State = 269; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(OPEN_PARENTHESIS);
			State = 272; expression(0);
			State = 273; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 50, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; expression(0);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 276; Match(COMMA);
				State = 277; expression(0);
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public MethodCallParamsContext methodCallParams() {
			return GetRuleContext<MethodCallParamsContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(IDENTIFIER);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 284; typeArguments();
				}
			}

			State = 287; Match(OPEN_PARENTHESIS);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << NEW) | (1L << OUT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 288; methodCallParams();
				}
			}

			State = 291; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallParamsContext : ParserRuleContext {
		public MethodCallParamContext[] methodCallParam() {
			return GetRuleContexts<MethodCallParamContext>();
		}
		public MethodCallParamContext methodCallParam(int i) {
			return GetRuleContext<MethodCallParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public MethodCallParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodCallParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodCallParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallParamsContext methodCallParams() {
		MethodCallParamsContext _localctx = new MethodCallParamsContext(Context, State);
		EnterRule(_localctx, 54, RULE_methodCallParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; methodCallParam();
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 294; Match(COMMA);
				State = 295; methodCallParam();
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallParamContext : ParserRuleContext {
		public IToken outVariableName;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(DoshikParser.OUT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public MethodCallParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodCallParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodCallParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallParamContext methodCallParam() {
		MethodCallParamContext _localctx = new MethodCallParamContext(Context, State);
		EnterRule(_localctx, 56, RULE_methodCallParam);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWCONST:
			case NEW:
			case INT_LITERAL:
			case INT_HEX_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case OPEN_PARENTHESIS:
			case BANG:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301; expression(0);
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302; Match(OUT);
				State = 303; _localctx.outVariableName = Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCallContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(DoshikParser.NEW, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public MethodCallParamsContext methodCallParams() {
			return GetRuleContext<MethodCallParamsContext>(0);
		}
		public NewCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNewCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNewCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCallContext newCall() {
		NewCallContext _localctx = new NewCallContext(Context, State);
		EnterRule(_localctx, 58, RULE_newCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(NEW);
			State = 307; typeType();
			State = 308; Match(OPEN_PARENTHESIS);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << NEW) | (1L << OUT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 309; methodCallParams();
				}
			}

			State = 312; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewConstCallContext : ParserRuleContext {
		public ITerminalNode NEWCONST() { return GetToken(DoshikParser.NEWCONST, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public NewConstCallParamsContext newConstCallParams() {
			return GetRuleContext<NewConstCallParamsContext>(0);
		}
		public NewConstCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newConstCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNewConstCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNewConstCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewConstCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewConstCallContext newConstCall() {
		NewConstCallContext _localctx = new NewConstCallContext(Context, State);
		EnterRule(_localctx, 60, RULE_newConstCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(NEWCONST);
			State = 315; typeType();
			State = 316; Match(OPEN_PARENTHESIS);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_BRACE))) != 0)) {
				{
				State = 317; newConstCallParams();
				}
			}

			State = 320; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewConstCallParamsContext : ParserRuleContext {
		public NewConstCallParamContext[] newConstCallParam() {
			return GetRuleContexts<NewConstCallParamContext>();
		}
		public NewConstCallParamContext newConstCallParam(int i) {
			return GetRuleContext<NewConstCallParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public NewConstCallParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newConstCallParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNewConstCallParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNewConstCallParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewConstCallParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewConstCallParamsContext newConstCallParams() {
		NewConstCallParamsContext _localctx = new NewConstCallParamsContext(Context, State);
		EnterRule(_localctx, 62, RULE_newConstCallParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; newConstCallParam();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 323; Match(COMMA);
				State = 324; newConstCallParam();
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewConstCallParamContext : ParserRuleContext {
		public ConstExpressionContext constExpression() {
			return GetRuleContext<ConstExpressionContext>(0);
		}
		public NewConstCallParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newConstCallParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNewConstCallParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNewConstCallParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewConstCallParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewConstCallParamContext newConstCallParam() {
		NewConstCallParamContext _localctx = new NewConstCallParamContext(Context, State);
		EnterRule(_localctx, 64, RULE_newConstCallParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; constExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public NewConstCallContext newConstCall() {
			return GetRuleContext<NewConstCallContext>(0);
		}
		public ConstArrayInitializerContext constArrayInitializer() {
			return GetRuleContext<ConstArrayInitializerContext>(0);
		}
		public ConstExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterConstExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitConstExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstExpressionContext constExpression() {
		ConstExpressionContext _localctx = new ConstExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_constExpression);
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LITERAL:
			case INT_HEX_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332; literal();
				}
				break;
			case NEWCONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333; newConstCall();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 334; constArrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstArrayInitializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(DoshikParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(DoshikParser.CLOSE_BRACE, 0); }
		public ConstExpressionContext[] constExpression() {
			return GetRuleContexts<ConstExpressionContext>();
		}
		public ConstExpressionContext constExpression(int i) {
			return GetRuleContext<ConstExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public ConstArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constArrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterConstArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitConstArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstArrayInitializerContext constArrayInitializer() {
		ConstArrayInitializerContext _localctx = new ConstArrayInitializerContext(Context, State);
		EnterRule(_localctx, 68, RULE_constArrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(OPEN_BRACE);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEWCONST) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_BRACE))) != 0)) {
				{
				State = 338; constExpression();
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 339; Match(COMMA);
						State = 340; constExpression();
						}
						} 
					}
					State = 345;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 346; Match(COMMA);
					}
				}

				}
			}

			State = 351; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewCallExpressionContext : ExpressionContext {
		public NewCallContext newCall() {
			return GetRuleContext<NewCallContext>(0);
		}
		public NewCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNewCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNewCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(DoshikParser.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public DotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(DoshikParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(DoshikParser.SUB, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPrefixExpressionContext : ExpressionContext {
		public IToken prefix;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(DoshikParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(DoshikParser.SUB, 0); }
		public ITerminalNode INC() { return GetToken(DoshikParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(DoshikParser.DEC, 0); }
		public UnaryPrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterUnaryPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitUnaryPrefixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPrefixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewConstCallExpressionContext : ExpressionContext {
		public NewConstCallContext newConstCall() {
			return GetRuleContext<NewConstCallContext>(0);
		}
		public NewConstCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNewConstCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNewConstCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewConstCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(DoshikParser.ASSIGN, 0); }
		public ITerminalNode ADD_ASSIGN() { return GetToken(DoshikParser.ADD_ASSIGN, 0); }
		public ITerminalNode SUB_ASSIGN() { return GetToken(DoshikParser.SUB_ASSIGN, 0); }
		public ITerminalNode MUL_ASSIGN() { return GetToken(DoshikParser.MUL_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(DoshikParser.DIV_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(DoshikParser.MOD_ASSIGN, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketsExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(DoshikParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(DoshikParser.CLOSE_BRACKET, 0); }
		public BracketsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterBracketsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitBracketsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ITerminalNode BANG() { return GetToken(DoshikParser.BANG, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(DoshikParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(DoshikParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(DoshikParser.MOD, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPostfixExpressionContext : ExpressionContext {
		public IToken postfix;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(DoshikParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(DoshikParser.DEC, 0); }
		public UnaryPostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterUnaryPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitUnaryPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelativeExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LE() { return GetToken(DoshikParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(DoshikParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(DoshikParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(DoshikParser.LT, 0); }
		public RelativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterRelativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitRelativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(DoshikParser.COLON, 0); }
		public ITerminalNode QUESTION() { return GetToken(DoshikParser.QUESTION, 0); }
		public IfElseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterIfElseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitIfElseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(DoshikParser.OR, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(DoshikParser.AND, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public IToken bop;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(DoshikParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(DoshikParser.NOTEQUAL, 0); }
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecastExpressionContext : ExpressionContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypecastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypecastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypecastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 70;
		EnterRecursionRule(_localctx, 70, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 354; primary();
				}
				break;
			case 2:
				{
				_localctx = new MethodCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 355; methodCall();
				}
				break;
			case 3:
				{
				_localctx = new NewConstCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 356; newConstCall();
				}
				break;
			case 4:
				{
				_localctx = new NewCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 357; newCall();
				}
				break;
			case 5:
				{
				_localctx = new TypecastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 358; Match(OPEN_PARENTHESIS);
				State = 359; typeType();
				State = 360; Match(CLOSE_PARENTHESIS);
				State = 361; expression(12);
				}
				break;
			case 6:
				{
				_localctx = new UnaryPrefixExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 363;
				((UnaryPrefixExpressionContext)_localctx).prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0)) ) {
					((UnaryPrefixExpressionContext)_localctx).prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 364; expression(10);
				}
				break;
			case 7:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 365; Match(BANG);
				State = 366; expression(9);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 411;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 409;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 369;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 370;
						((MultiplicationExpressionContext)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MultiplicationExpressionContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 371; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 372;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 373;
						((AdditionExpressionContext)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AdditionExpressionContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 374; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new RelativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 375;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 376;
						((RelativeExpressionContext)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << LE) | (1L << GE))) != 0)) ) {
							((RelativeExpressionContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 377; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 378;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 379;
						((EqualsExpressionContext)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							((EqualsExpressionContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 380; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 381;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 382; ((AndExpressionContext)_localctx).bop = Match(AND);
						State = 383; expression(5);
						}
						break;
					case 6:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 384;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 385; ((OrExpressionContext)_localctx).bop = Match(OR);
						State = 386; expression(4);
						}
						break;
					case 7:
						{
						_localctx = new IfElseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 387;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 388; ((IfElseExpressionContext)_localctx).bop = Match(QUESTION);
						State = 389; expression(0);
						State = 390; Match(COLON);
						State = 391; expression(2);
						}
						break;
					case 8:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 393;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 394;
						((AssignmentExpressionContext)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << ADD_ASSIGN) | (1L << SUB_ASSIGN) | (1L << MUL_ASSIGN) | (1L << DIV_ASSIGN) | (1L << MOD_ASSIGN))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 395; expression(1);
						}
						break;
					case 9:
						{
						_localctx = new DotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 396;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 397; ((DotExpressionContext)_localctx).bop = Match(DOT);
						State = 400;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
						case 1:
							{
							State = 398; Match(IDENTIFIER);
							}
							break;
						case 2:
							{
							State = 399; methodCall();
							}
							break;
						}
						}
						break;
					case 10:
						{
						_localctx = new BracketsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 402;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 403; Match(OPEN_BRACKET);
						State = 404; expression(0);
						State = 405; Match(CLOSE_BRACKET);
						}
						break;
					case 11:
						{
						_localctx = new UnaryPostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 407;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 408;
						((UnaryPostfixExpressionContext)_localctx).postfix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==INC || _la==DEC) ) {
							((UnaryPostfixExpressionContext)_localctx).postfix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 413;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : PrimaryContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public ParenthesisExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 72, RULE_primary);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENTHESIS:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 414; Match(OPEN_PARENTHESIS);
				State = 415; expression(0);
				State = 416; Match(CLOSE_PARENTHESIS);
				}
				break;
			case INT_LITERAL:
			case INT_HEX_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 418; literal();
				}
				break;
			case IDENTIFIER:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 419; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode[] OPEN_BRACKET() { return GetTokens(DoshikParser.OPEN_BRACKET); }
		public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(DoshikParser.OPEN_BRACKET, i);
		}
		public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(DoshikParser.CLOSE_BRACKET); }
		public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(DoshikParser.CLOSE_BRACKET, i);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 422; classOrInterfaceType();
				}
				break;
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
				{
				State = 423; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 426; Match(OPEN_BRACKET);
				State = 427; Match(CLOSE_BRACKET);
				}
				}
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(DoshikParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(DoshikParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(DoshikParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(DoshikParser.STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 76, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(DoshikParser.LT, 0); }
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public ITerminalNode GT() { return GetToken(DoshikParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(LT);
			State = 436; typeArgument();
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 437; Match(COMMA);
				State = 438; typeArgument();
				}
				}
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 444; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 35: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 17);
		case 9: return Precpred(Context, 16);
		case 10: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '?', '\x1C1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x3', '\x2', '\a', '\x2', 'T', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', 'W', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', ']', '\n', '\x3', '\x3', '\x4', '\x5', '\x4', '`', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'i', '\n', '\x5', '\x3', 
		'\x6', '\x5', '\x6', 'l', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'u', '\n', '\a', '\f', '\a', '\xE', '\a', 'x', '\v', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '}', '\n', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x83', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x89', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x8C', '\v', '\v', '\x3', '\v', '\x5', 
		'\v', '\x8F', '\n', '\v', '\x5', '\v', '\x91', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x97', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x9C', '\n', '\f', 
		'\a', '\f', '\x9E', '\n', '\f', '\f', '\f', '\xE', '\f', '\xA1', '\v', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\xA7', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\xAE', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\xB1', '\v', '\xF', '\x3', '\x10', '\x5', '\x10', '\xB4', '\n', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xBE', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\xC4', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xC7', 
		'\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xCF', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xDA', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xE8', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xED', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\xF2', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\xF9', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\xFD', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x101', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x105', '\n', '\x17', '\x5', '\x17', '\x107', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x10B', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\a', '\x1B', '\x119', '\n', '\x1B', '\f', '\x1B', 
		'\xE', '\x1B', '\x11C', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x120', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x124', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x12B', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x12E', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x133', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x139', '\n', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x141', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\a', '!', '\x148', '\n', '!', '\f', '!', '\xE', '!', 
		'\x14B', '\v', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x152', '\n', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\a', '$', '\x158', '\n', '$', '\f', '$', '\xE', '$', 
		'\x15B', '\v', '$', '\x3', '$', '\x5', '$', '\x15E', '\n', '$', '\x5', 
		'$', '\x160', '\n', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x172', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x193', '\n', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\a', '%', '\x19C', '\n', '%', '\f', '%', '\xE', '%', '\x19F', 
		'\v', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x1A7', '\n', '&', '\x3', '\'', '\x3', '\'', 
		'\x5', '\'', '\x1AB', '\n', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', 
		'\x1AF', '\n', '\'', '\f', '\'', '\xE', '\'', '\x1B2', '\v', '\'', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', 
		')', '\x1BA', '\n', ')', '\f', ')', '\xE', ')', '\x1BD', '\v', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x2', '\x3', 'H', '*', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', '\x2', '\f', '\x3', '\x2', '\x6', '\a', '\x3', '\x2', 
		'\x15', '\x16', '\x3', '\x2', '\x35', '\x38', '\x3', '\x2', '\x39', ';', 
		'\x3', '\x2', '\x37', '\x38', '\x4', '\x2', '*', '+', '\x30', '\x31', 
		'\x4', '\x2', '/', '/', '\x32', '\x32', '\x3', '\x2', '$', ')', '\x3', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x10', '\x13', '\x2', '\x1E4', '\x2', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x4', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '_', '\x3', '\x2', '\x2', '\x2', '\b', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'k', '\x3', '\x2', '\x2', '\x2', '\f', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'y', '\x3', '\x2', '\x2', '\x2', '\x10', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x82', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x16', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', ' ', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xBF', '\x3', '\x2', '\x2', '\x2', '$', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xCE', '\x3', '\x2', '\x2', '\x2', '(', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xF8', '\x3', '\x2', '\x2', '\x2', ',', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x32', '\x111', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x115', '\x3', '\x2', '\x2', '\x2', '\x36', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x127', '\x3', '\x2', '\x2', '\x2', 
		':', '\x132', '\x3', '\x2', '\x2', '\x2', '<', '\x134', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x13C', '\x3', '\x2', '\x2', '\x2', '@', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x151', '\x3', '\x2', '\x2', '\x2', '\x46', '\x153', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x171', '\x3', '\x2', '\x2', '\x2', 'J', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1B3', '\x3', '\x2', '\x2', '\x2', 'P', '\x1B5', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'T', '\x5', '\x4', '\x3', '\x2', 'S', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'W', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x2', 
		'\x2', '\x3', 'Y', '\x3', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x5', 
		'\x6', '\x4', '\x2', '[', ']', '\x5', '\n', '\x6', '\x2', '\\', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '\x5', '\x2', '\x2', '_', 
		'^', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x5', '\b', 
		'\x5', '\x2', '\x62', '\x63', '\a', '?', '\x2', '\x2', '\x63', '\x64', 
		'\x5', '\x1A', '\xE', '\x2', '\x64', '\x65', '\x5', '$', '\x13', '\x2', 
		'\x65', '\a', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x5', 'L', '\'', 
		'\x2', 'g', 'i', '\a', '\x14', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'l', '\t', '\x2', '\x2', '\x2', 'k', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'n', '\x5', 'L', '\'', '\x2', 'n', 'o', '\x5', 
		'\f', '\a', '\x2', 'o', 'p', '\a', '!', '\x2', '\x2', 'p', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'v', '\x5', '\xE', '\b', '\x2', 'r', 's', '\a', 
		'\"', '\x2', '\x2', 's', 'u', '\x5', '\xE', '\b', '\x2', 't', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 
		'|', '\x5', '\x10', '\t', '\x2', 'z', '{', '\a', '$', '\x2', '\x2', '{', 
		'}', '\x5', '\x12', '\n', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\a', '?', '\x2', '\x2', '\x7F', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x83', '\x5', '\x14', '\v', '\x2', '\x81', '\x83', 
		'\x5', 'H', '%', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x90', '\a', '\x1D', '\x2', '\x2', '\x85', '\x8A', '\x5', 
		'\x12', '\n', '\x2', '\x86', '\x87', '\a', '\"', '\x2', '\x2', '\x87', 
		'\x89', '\x5', '\x12', '\n', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8F', '\a', '\"', '\x2', '\x2', '\x8E', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x90', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x93', '\a', '\x1E', '\x2', '\x2', '\x93', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\a', '?', '\x2', 
		'\x2', '\x95', '\x97', '\x5', 'P', ')', '\x2', '\x96', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '#', '\x2', 
		'\x2', '\x99', '\x9B', '\a', '?', '\x2', '\x2', '\x9A', '\x9C', '\x5', 
		'P', ')', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', 'L', 
		'\'', '\x2', '\xA3', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA6', 
		'\a', '\x1B', '\x2', '\x2', '\xA5', '\xA7', '\x5', '\x1C', '\xF', '\x2', 
		'\xA6', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA9', 
		'\a', '\x1C', '\x2', '\x2', '\xA9', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAF', '\x5', '\x1E', '\x10', '\x2', '\xAB', '\xAC', '\a', '\"', 
		'\x2', '\x2', '\xAC', '\xAE', '\x5', '\x1E', '\x10', '\x2', '\xAD', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\a', '\b', '\x2', '\x2', 
		'\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', 
		'\x5', 'L', '\'', '\x2', '\xB6', '\xB7', '\x5', '\x10', '\t', '\x2', '\xB7', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBE', '\x5', '\"', '\x12', 
		'\x2', '\xB9', '\xBE', '\a', '\x17', '\x2', '\x2', '\xBA', '\xBE', '\a', 
		'\x19', '\x2', '\x2', '\xBB', '\xBE', '\a', '\x18', '\x2', '\x2', '\xBC', 
		'\xBE', '\a', '\x1A', '\x2', '\x2', '\xBD', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\t', '\x3', '\x2', '\x2', '\xC0', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC5', '\a', '\x1D', '\x2', '\x2', '\xC2', 
		'\xC4', '\x5', '&', '\x14', '\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC8', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\a', '\x1E', '\x2', '\x2', '\xC9', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\x5', '(', '\x15', '\x2', '\xCB', 
		'\xCC', '\a', '!', '\x2', '\x2', '\xCC', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCF', '\x5', '*', '\x16', '\x2', '\xCE', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x5', 'L', '\'', '\x2', 
		'\xD1', '\xD2', '\x5', '\f', '\a', '\x2', '\xD2', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xF9', '\x5', '$', '\x13', '\x2', '\xD4', '\xD5', '\a', 
		'\t', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x32', '\x1A', '\x2', '\xD6', 
		'\xD9', '\x5', '*', '\x16', '\x2', '\xD7', '\xD8', '\a', '\n', '\x2', 
		'\x2', '\xD8', '\xDA', '\x5', '*', '\x16', '\x2', '\xD9', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', '\f', '\x2', 
		'\x2', '\xDC', '\xDD', '\a', '\x1B', '\x2', '\x2', '\xDD', '\xDE', '\x5', 
		',', '\x17', '\x2', '\xDE', '\xDF', '\a', '\x1C', '\x2', '\x2', '\xDF', 
		'\xE0', '\x5', '*', '\x16', '\x2', '\xE0', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\a', '\v', '\x2', '\x2', '\xE2', '\xE3', '\x5', 
		'\x32', '\x1A', '\x2', '\xE3', '\xE4', '\x5', '*', '\x16', '\x2', '\xE4', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\a', '\xF', '\x2', 
		'\x2', '\xE6', '\xE8', '\x5', 'H', '%', '\x2', '\xE7', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xF9', '\a', '!', '\x2', 
		'\x2', '\xEA', '\xEC', '\a', '\r', '\x2', '\x2', '\xEB', '\xED', '\a', 
		'?', '\x2', '\x2', '\xEC', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xF9', '\a', '!', '\x2', '\x2', '\xEF', '\xF1', '\a', 
		'\xE', '\x2', '\x2', '\xF0', '\xF2', '\a', '?', '\x2', '\x2', '\xF1', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF9', '\a', 
		'!', '\x2', '\x2', '\xF4', '\xF9', '\a', '!', '\x2', '\x2', '\xF5', '\xF6', 
		'\x5', 'H', '%', '\x2', '\xF6', '\xF7', '\a', '!', '\x2', '\x2', '\xF7', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF4', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x107', '\x5', '\x30', '\x19', 
		'\x2', '\xFB', '\xFD', '\x5', '.', '\x18', '\x2', '\xFC', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', '\a', '!', '\x2', 
		'\x2', '\xFF', '\x101', '\x5', 'H', '%', '\x2', '\x100', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x104', '\a', '!', '\x2', 
		'\x2', '\x103', '\x105', '\x5', '\x34', '\x1B', '\x2', '\x104', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10B', '\x5', '(', '\x15', 
		'\x2', '\x109', '\x10B', '\x5', '\x34', '\x1B', '\x2', '\x10A', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '/', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x5', 'L', 
		'\'', '\x2', '\x10D', '\x10E', '\x5', '\x10', '\t', '\x2', '\x10E', '\x10F', 
		'\a', '.', '\x2', '\x2', '\x10F', '\x110', '\x5', 'H', '%', '\x2', '\x110', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', '\x1B', '\x2', 
		'\x2', '\x112', '\x113', '\x5', 'H', '%', '\x2', '\x113', '\x114', '\a', 
		'\x1C', '\x2', '\x2', '\x114', '\x33', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x11A', '\x5', 'H', '%', '\x2', '\x116', '\x117', '\a', '\"', '\x2', 
		'\x2', '\x117', '\x119', '\x5', 'H', '%', '\x2', '\x118', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x35', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11F', '\a', '?', '\x2', '\x2', 
		'\x11E', '\x120', '\x5', 'P', ')', '\x2', '\x11F', '\x11E', '\x3', '\x2', 
		'\x2', '\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x123', '\a', '\x1B', '\x2', '\x2', 
		'\x122', '\x124', '\x5', '\x38', '\x1D', '\x2', '\x123', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\a', '\x1C', '\x2', 
		'\x2', '\x126', '\x37', '\x3', '\x2', '\x2', '\x2', '\x127', '\x12C', 
		'\x5', ':', '\x1E', '\x2', '\x128', '\x129', '\a', '\"', '\x2', '\x2', 
		'\x129', '\x12B', '\x5', ':', '\x1E', '\x2', '\x12A', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x39', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x133', '\x5', 'H', '%', '\x2', 
		'\x130', '\x131', '\a', '\b', '\x2', '\x2', '\x131', '\x133', '\a', '?', 
		'\x2', '\x2', '\x132', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x133', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\a', '\x4', '\x2', '\x2', '\x135', '\x136', '\x5', 
		'L', '\'', '\x2', '\x136', '\x138', '\a', '\x1B', '\x2', '\x2', '\x137', 
		'\x139', '\x5', '\x38', '\x1D', '\x2', '\x138', '\x137', '\x3', '\x2', 
		'\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x1C', '\x2', '\x2', 
		'\x13B', '=', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x3', 
		'\x2', '\x2', '\x13D', '\x13E', '\x5', 'L', '\'', '\x2', '\x13E', '\x140', 
		'\a', '\x1B', '\x2', '\x2', '\x13F', '\x141', '\x5', '@', '!', '\x2', 
		'\x140', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x143', '\a', '\x1C', '\x2', '\x2', '\x143', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x149', '\x5', '\x42', '\"', '\x2', '\x145', '\x146', 
		'\a', '\"', '\x2', '\x2', '\x146', '\x148', '\x5', '\x42', '\"', '\x2', 
		'\x147', '\x145', '\x3', '\x2', '\x2', '\x2', '\x148', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', 
		'\x5', '\x44', '#', '\x2', '\x14D', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x152', '\x5', ' ', '\x11', '\x2', '\x14F', '\x152', '\x5', 
		'>', ' ', '\x2', '\x150', '\x152', '\x5', '\x46', '$', '\x2', '\x151', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x15F', '\a', '\x1D', '\x2', '\x2', 
		'\x154', '\x159', '\x5', '\x44', '#', '\x2', '\x155', '\x156', '\a', '\"', 
		'\x2', '\x2', '\x156', '\x158', '\x5', '\x44', '#', '\x2', '\x157', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15E', '\a', '\"', '\x2', 
		'\x2', '\x15D', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x154', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x162', '\a', '\x1E', '\x2', '\x2', '\x162', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x164', '\b', '%', '\x1', '\x2', '\x164', '\x172', '\x5', 
		'J', '&', '\x2', '\x165', '\x172', '\x5', '\x36', '\x1C', '\x2', '\x166', 
		'\x172', '\x5', '>', ' ', '\x2', '\x167', '\x172', '\x5', '<', '\x1F', 
		'\x2', '\x168', '\x169', '\a', '\x1B', '\x2', '\x2', '\x169', '\x16A', 
		'\x5', 'L', '\'', '\x2', '\x16A', '\x16B', '\a', '\x1C', '\x2', '\x2', 
		'\x16B', '\x16C', '\x5', 'H', '%', '\xE', '\x16C', '\x172', '\x3', '\x2', 
		'\x2', '\x2', '\x16D', '\x16E', '\t', '\x4', '\x2', '\x2', '\x16E', '\x172', 
		'\x5', 'H', '%', '\f', '\x16F', '\x170', '\a', ',', '\x2', '\x2', '\x170', 
		'\x172', '\x5', 'H', '%', '\v', '\x171', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '\x165', '\x3', '\x2', '\x2', '\x2', '\x171', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x168', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\f', '\n', '\x2', 
		'\x2', '\x174', '\x175', '\t', '\x5', '\x2', '\x2', '\x175', '\x19C', 
		'\x5', 'H', '%', '\v', '\x176', '\x177', '\f', '\t', '\x2', '\x2', '\x177', 
		'\x178', '\t', '\x6', '\x2', '\x2', '\x178', '\x19C', '\x5', 'H', '%', 
		'\n', '\x179', '\x17A', '\f', '\b', '\x2', '\x2', '\x17A', '\x17B', '\t', 
		'\a', '\x2', '\x2', '\x17B', '\x19C', '\x5', 'H', '%', '\t', '\x17C', 
		'\x17D', '\f', '\a', '\x2', '\x2', '\x17D', '\x17E', '\t', '\b', '\x2', 
		'\x2', '\x17E', '\x19C', '\x5', 'H', '%', '\b', '\x17F', '\x180', '\f', 
		'\x6', '\x2', '\x2', '\x180', '\x181', '\a', '\x33', '\x2', '\x2', '\x181', 
		'\x19C', '\x5', 'H', '%', '\a', '\x182', '\x183', '\f', '\x5', '\x2', 
		'\x2', '\x183', '\x184', '\a', '\x34', '\x2', '\x2', '\x184', '\x19C', 
		'\x5', 'H', '%', '\x6', '\x185', '\x186', '\f', '\x4', '\x2', '\x2', '\x186', 
		'\x187', '\a', '-', '\x2', '\x2', '\x187', '\x188', '\x5', 'H', '%', '\x2', 
		'\x188', '\x189', '\a', '.', '\x2', '\x2', '\x189', '\x18A', '\x5', 'H', 
		'%', '\x4', '\x18A', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', 
		'\f', '\x3', '\x2', '\x2', '\x18C', '\x18D', '\t', '\t', '\x2', '\x2', 
		'\x18D', '\x19C', '\x5', 'H', '%', '\x3', '\x18E', '\x18F', '\f', '\x13', 
		'\x2', '\x2', '\x18F', '\x192', '\a', '#', '\x2', '\x2', '\x190', '\x193', 
		'\a', '?', '\x2', '\x2', '\x191', '\x193', '\x5', '\x36', '\x1C', '\x2', 
		'\x192', '\x190', '\x3', '\x2', '\x2', '\x2', '\x192', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x195', '\f', '\x12', '\x2', '\x2', '\x195', '\x196', '\a', '\x1F', '\x2', 
		'\x2', '\x196', '\x197', '\x5', 'H', '%', '\x2', '\x197', '\x198', '\a', 
		' ', '\x2', '\x2', '\x198', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x19A', '\f', '\r', '\x2', '\x2', '\x19A', '\x19C', '\t', '\n', '\x2', 
		'\x2', '\x19B', '\x173', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x19B', '\x182', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x19B', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x19C', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19B', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x1A1', '\a', '\x1B', '\x2', '\x2', '\x1A1', '\x1A2', 
		'\x5', 'H', '%', '\x2', '\x1A2', '\x1A3', '\a', '\x1C', '\x2', '\x2', 
		'\x1A3', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A7', '\x5', 
		' ', '\x11', '\x2', '\x1A5', '\x1A7', '\a', '?', '\x2', '\x2', '\x1A6', 
		'\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x1AB', '\x5', '\x16', '\f', '\x2', '\x1A9', 
		'\x1AB', '\x5', 'N', '(', '\x2', '\x1AA', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\a', '\x1F', '\x2', '\x2', 
		'\x1AD', '\x1AF', '\a', ' ', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B0', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3', '\x1B4', '\t', '\v', '\x2', '\x2', '\x1B4', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '+', '\x2', '\x2', 
		'\x1B6', '\x1BB', '\x5', '\x18', '\r', '\x2', '\x1B7', '\x1B8', '\a', 
		'\"', '\x2', '\x2', '\x1B8', '\x1BA', '\x5', '\x18', '\r', '\x2', '\x1B9', 
		'\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BD', '\x3', '\x2', '\x2', 
		'\x2', '\x1BB', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\a', 
		'*', '\x2', '\x2', '\x1BF', 'Q', '\x3', '\x2', '\x2', '\x2', '\x34', 'U', 
		'\\', '_', 'h', 'k', 'v', '|', '\x82', '\x8A', '\x8E', '\x90', '\x96', 
		'\x9B', '\x9F', '\xA6', '\xAF', '\xB3', '\xBD', '\xC5', '\xCE', '\xD9', 
		'\xE7', '\xEC', '\xF1', '\xF8', '\xFC', '\x100', '\x104', '\x106', '\x10A', 
		'\x11A', '\x11F', '\x123', '\x12C', '\x132', '\x138', '\x140', '\x149', 
		'\x151', '\x159', '\x15D', '\x15F', '\x171', '\x192', '\x19B', '\x19D', 
		'\x1A6', '\x1AA', '\x1B0', '\x1BB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
