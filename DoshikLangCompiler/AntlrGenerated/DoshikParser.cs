//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Programs\DoshikLang\DoshikLangAntlr\DoshikParser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class DoshikParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DEFAULT=1, NEW=2, EVENT=3, PRIVATE=4, PUBLIC=5, OUT=6, IF=7, ELSE=8, WHILE=9, 
		FOR=10, BREAK=11, CONTINUE=12, RETURN=13, INT=14, FLOAT=15, BOOL=16, STRING=17, 
		OBJECT=18, VOID=19, INT_LITERAL=20, INT_HEX_LITERAL=21, FLOAT_LITERAL=22, 
		BOOL_LITERAL=23, STRING_LITERAL=24, NULL_LITERAL=25, SCOPE_RESOLUTION=26, 
		DOT=27, SEMICOLON=28, COMMA=29, OPEN_PARENTHESIS=30, CLOSE_PARENTHESIS=31, 
		OPEN_BRACE=32, CLOSE_BRACE=33, OPEN_BRACKET=34, CLOSE_BRACKET=35, ASSIGN=36, 
		ADD_ASSIGN=37, SUB_ASSIGN=38, MUL_ASSIGN=39, DIV_ASSIGN=40, MOD_ASSIGN=41, 
		GT=42, LT=43, BANG=44, QUESTION=45, COLON=46, EQUAL=47, LE=48, GE=49, 
		NOTEQUAL=50, AND=51, OR=52, INC=53, DEC=54, ADD=55, SUB=56, MUL=57, DIV=58, 
		MOD=59, WHITESPACE=60, MULTILINE_COMMENT=61, COMMENT=62, IDENTIFIER=63;
	public const int
		RULE_compilationUnit = 0, RULE_memberDeclaration = 1, RULE_methodDeclaration = 2, 
		RULE_typeTypeOrVoid = 3, RULE_fieldDeclaration = 4, RULE_variableDeclarator = 5, 
		RULE_variableInitializer = 6, RULE_arrayInitializer = 7, RULE_classOrInterfaceType = 8, 
		RULE_typeArgument = 9, RULE_formalParameters = 10, RULE_formalParameterList = 11, 
		RULE_formalParameter = 12, RULE_literal = 13, RULE_integerLiteral = 14, 
		RULE_block = 15, RULE_statementInBlock = 16, RULE_localVariableDeclaration = 17, 
		RULE_statement = 18, RULE_forControl = 19, RULE_forInit = 20, RULE_parExpression = 21, 
		RULE_expressionList = 22, RULE_defaultOfType = 23, RULE_methodCall = 24, 
		RULE_methodCallParams = 25, RULE_methodCallParam = 26, RULE_newCall = 27, 
		RULE_expression = 28, RULE_primary = 29, RULE_typeType = 30, RULE_primitiveType = 31, 
		RULE_typeArguments = 32;
	public static readonly string[] ruleNames = {
		"compilationUnit", "memberDeclaration", "methodDeclaration", "typeTypeOrVoid", 
		"fieldDeclaration", "variableDeclarator", "variableInitializer", "arrayInitializer", 
		"classOrInterfaceType", "typeArgument", "formalParameters", "formalParameterList", 
		"formalParameter", "literal", "integerLiteral", "block", "statementInBlock", 
		"localVariableDeclaration", "statement", "forControl", "forInit", "parExpression", 
		"expressionList", "defaultOfType", "methodCall", "methodCallParams", "methodCallParam", 
		"newCall", "expression", "primary", "typeType", "primitiveType", "typeArguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'default'", "'new'", "'event'", "'private'", "'public'", "'out'", 
		"'if'", "'else'", "'while'", "'for'", "'break'", "'continue'", "'return'", 
		"'int'", "'float'", "'bool'", "'string'", "'object'", "'void'", null, 
		null, null, null, null, "'null'", "'::'", "'.'", "';'", "','", "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "'='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'>'", "'<'", "'!'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", 
		"'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DEFAULT", "NEW", "EVENT", "PRIVATE", "PUBLIC", "OUT", "IF", "ELSE", 
		"WHILE", "FOR", "BREAK", "CONTINUE", "RETURN", "INT", "FLOAT", "BOOL", 
		"STRING", "OBJECT", "VOID", "INT_LITERAL", "INT_HEX_LITERAL", "FLOAT_LITERAL", 
		"BOOL_LITERAL", "STRING_LITERAL", "NULL_LITERAL", "SCOPE_RESOLUTION", 
		"DOT", "SEMICOLON", "COMMA", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "ASSIGN", 
		"ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"GT", "LT", "BANG", "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", 
		"AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "MOD", "WHITESPACE", 
		"MULTILINE_COMMENT", "COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DoshikParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DoshikParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DoshikParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DoshikParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(DoshikParser.Eof, 0); }
		public MemberDeclarationContext[] memberDeclaration() {
			return GetRuleContexts<MemberDeclarationContext>();
		}
		public MemberDeclarationContext memberDeclaration(int i) {
			return GetRuleContext<MemberDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EVENT) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << VOID) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 66; memberDeclaration();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_memberDeclaration);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; methodDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; fieldDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public TypeTypeOrVoidContext returnType;
		public IToken methodName;
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public ITerminalNode EVENT() { return GetToken(DoshikParser.EVENT, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVENT) {
				{
				State = 78; Match(EVENT);
				}
			}

			State = 81; _localctx.returnType = typeTypeOrVoid();
			State = 82; _localctx.methodName = Match(IDENTIFIER);
			State = 83; formalParameters();
			State = 84; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(DoshikParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTypeOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeTypeOrVoid);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case OBJECT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public ITerminalNode PUBLIC() { return GetToken(DoshikParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(DoshikParser.PRIVATE, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_fieldDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PRIVATE || _la==PUBLIC) {
				{
				State = 90;
				_la = TokenStream.LA(1);
				if ( !(_la==PRIVATE || _la==PUBLIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 93; typeType();
			State = 94; variableDeclarator();
			State = 95; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public IToken variableName;
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(DoshikParser.ASSIGN, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; _localctx.variableName = Match(IDENTIFIER);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 98; Match(ASSIGN);
				State = 99; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableInitializer);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; arrayInitializer();
				}
				break;
			case DEFAULT:
			case NEW:
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case OBJECT:
			case INT_LITERAL:
			case INT_HEX_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case OPEN_PARENTHESIS:
			case BANG:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(DoshikParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(DoshikParser.CLOSE_BRACE, 0); }
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 14, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(OPEN_BRACE);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << NEW) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << OPEN_BRACE) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 107; variableInitializer();
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 108; Match(COMMA);
						State = 109; variableInitializer();
						}
						} 
					}
					State = 114;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 115; Match(COMMA);
					}
				}

				}
			}

			State = 120; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(DoshikParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(DoshikParser.IDENTIFIER, i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public ITerminalNode[] SCOPE_RESOLUTION() { return GetTokens(DoshikParser.SCOPE_RESOLUTION); }
		public ITerminalNode SCOPE_RESOLUTION(int i) {
			return GetToken(DoshikParser.SCOPE_RESOLUTION, i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122; Match(IDENTIFIER);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 123; typeArguments();
				}
			}

			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOPE_RESOLUTION) {
				{
				{
				State = 126; Match(SCOPE_RESOLUTION);
				State = 127; Match(IDENTIFIER);
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 128; typeArguments();
					}
				}

				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; typeType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(OPEN_PARENTHESIS);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OUT) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 139; formalParameterList();
				}
			}

			State = 142; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 22, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; formalParameter();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 145; Match(COMMA);
				State = 146; formalParameter();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public IToken parameterName;
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public ITerminalNode OUT() { return GetToken(DoshikParser.OUT, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 152; Match(OUT);
				}
			}

			State = 155; typeType();
			State = 156; _localctx.parameterName = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public ITerminalNode FLOAT_LITERAL() { return GetToken(DoshikParser.FLOAT_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(DoshikParser.STRING_LITERAL, 0); }
		public ITerminalNode BOOL_LITERAL() { return GetToken(DoshikParser.BOOL_LITERAL, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(DoshikParser.NULL_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 26, RULE_literal);
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LITERAL:
			case INT_HEX_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; integerLiteral();
				}
				break;
			case FLOAT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; Match(FLOAT_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160; Match(STRING_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 161; Match(BOOL_LITERAL);
				}
				break;
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 162; Match(NULL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode INT_LITERAL() { return GetToken(DoshikParser.INT_LITERAL, 0); }
		public ITerminalNode INT_HEX_LITERAL() { return GetToken(DoshikParser.INT_HEX_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 28, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_la = TokenStream.LA(1);
			if ( !(_la==INT_LITERAL || _la==INT_HEX_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(DoshikParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(DoshikParser.CLOSE_BRACE, 0); }
		public StatementInBlockContext[] statementInBlock() {
			return GetRuleContexts<StatementInBlockContext>();
		}
		public StatementInBlockContext statementInBlock(int i) {
			return GetRuleContext<StatementInBlockContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 30, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(OPEN_BRACE);
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << NEW) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << SEMICOLON) | (1L << OPEN_PARENTHESIS) | (1L << OPEN_BRACE) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 168; statementInBlock();
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementInBlockContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementInBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementInBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterStatementInBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitStatementInBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementInBlockContext statementInBlock() {
		StatementInBlockContext _localctx = new StatementInBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_statementInBlock);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; localVariableDeclaration();
				State = 177; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_localVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; typeType();
			State = 183; variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileLoopStatementContext : StatementContext {
		public ParExpressionContext condition;
		public StatementContext body;
		public ITerminalNode WHILE() { return GetToken(DoshikParser.WHILE, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileLoopStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterWhileLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitWhileLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForLoopStatementContext : StatementContext {
		public StatementContext body;
		public ITerminalNode FOR() { return GetToken(DoshikParser.FOR, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForLoopStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterForLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitForLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BreakStatementContext : StatementContext {
		public ITerminalNode BREAK() { return GetToken(DoshikParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public BreakStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NopStatementContext : StatementContext {
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public NopStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContinueStatementContext : StatementContext {
		public ITerminalNode CONTINUE() { return GetToken(DoshikParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public ContinueStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ParExpressionContext condition;
		public StatementContext trueBody;
		public StatementContext falseBody;
		public ITerminalNode IF() { return GetToken(DoshikParser.IF, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(DoshikParser.ELSE, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(DoshikParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(DoshikParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubBlockStatementContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubBlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterSubBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitSubBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement);
		int _la;
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				_localctx = new SubBlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; block();
				}
				break;
			case IF:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 186; Match(IF);
				State = 187; ((IfStatementContext)_localctx).condition = parExpression();
				State = 188; ((IfStatementContext)_localctx).trueBody = statement();
				State = 191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 189; Match(ELSE);
					State = 190; ((IfStatementContext)_localctx).falseBody = statement();
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new ForLoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 193; Match(FOR);
				State = 194; Match(OPEN_PARENTHESIS);
				State = 195; forControl();
				State = 196; Match(CLOSE_PARENTHESIS);
				State = 197; ((ForLoopStatementContext)_localctx).body = statement();
				}
				break;
			case WHILE:
				_localctx = new WhileLoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 199; Match(WHILE);
				State = 200; ((WhileLoopStatementContext)_localctx).condition = parExpression();
				State = 201; ((WhileLoopStatementContext)_localctx).body = statement();
				}
				break;
			case RETURN:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 203; Match(RETURN);
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << NEW) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 204; expression(0);
					}
				}

				State = 207; Match(SEMICOLON);
				}
				break;
			case BREAK:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 208; Match(BREAK);
				State = 209; Match(SEMICOLON);
				}
				break;
			case CONTINUE:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 210; Match(CONTINUE);
				State = 211; Match(SEMICOLON);
				}
				break;
			case SEMICOLON:
				_localctx = new NopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 212; Match(SEMICOLON);
				}
				break;
			case DEFAULT:
			case NEW:
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case OBJECT:
			case INT_LITERAL:
			case INT_HEX_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case OPEN_PARENTHESIS:
			case BANG:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case IDENTIFIER:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 213; expression(0);
				State = 214; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ExpressionListContext forUpdate;
		public ITerminalNode[] SEMICOLON() { return GetTokens(DoshikParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(DoshikParser.SEMICOLON, i);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 38, RULE_forControl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << NEW) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 218; forInit();
				}
			}

			State = 221; Match(SEMICOLON);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << NEW) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 222; expression(0);
				}
			}

			State = 225; Match(SEMICOLON);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << NEW) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 226; _localctx.forUpdate = expressionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 40, RULE_forInit);
		try {
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(OPEN_PARENTHESIS);
			State = 234; expression(0);
			State = 235; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 44, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; expression(0);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 238; Match(COMMA);
				State = 239; expression(0);
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultOfTypeContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(DoshikParser.DEFAULT, 0); }
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public DefaultOfTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultOfType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterDefaultOfType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitDefaultOfType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultOfType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultOfTypeContext defaultOfType() {
		DefaultOfTypeContext _localctx = new DefaultOfTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_defaultOfType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(DEFAULT);
			State = 246; Match(OPEN_PARENTHESIS);
			State = 247; typeType();
			State = 248; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public IToken methodName;
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public MethodCallParamsContext methodCallParams() {
			return GetRuleContext<MethodCallParamsContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 48, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; _localctx.methodName = Match(IDENTIFIER);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 251; typeArguments();
				}
			}

			State = 254; Match(OPEN_PARENTHESIS);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << NEW) | (1L << OUT) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 255; methodCallParams();
				}
			}

			State = 258; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallParamsContext : ParserRuleContext {
		public MethodCallParamContext[] methodCallParam() {
			return GetRuleContexts<MethodCallParamContext>();
		}
		public MethodCallParamContext methodCallParam(int i) {
			return GetRuleContext<MethodCallParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public MethodCallParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodCallParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodCallParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallParamsContext methodCallParams() {
		MethodCallParamsContext _localctx = new MethodCallParamsContext(Context, State);
		EnterRule(_localctx, 50, RULE_methodCallParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; methodCallParam();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 261; Match(COMMA);
				State = 262; methodCallParam();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallParamContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(DoshikParser.OUT, 0); }
		public MethodCallParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCallParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodCallParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodCallParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallParamContext methodCallParam() {
		MethodCallParamContext _localctx = new MethodCallParamContext(Context, State);
		EnterRule(_localctx, 52, RULE_methodCallParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 268; Match(OUT);
				}
			}

			State = 271; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCallContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(DoshikParser.NEW, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public MethodCallParamsContext methodCallParams() {
			return GetRuleContext<MethodCallParamsContext>(0);
		}
		public NewCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNewCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNewCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCallContext newCall() {
		NewCallContext _localctx = new NewCallContext(Context, State);
		EnterRule(_localctx, 54, RULE_newCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273; Match(NEW);
			State = 274; typeType();
			State = 275; Match(OPEN_PARENTHESIS);
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFAULT) | (1L << NEW) | (1L << OUT) | (1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT) | (1L << INT_LITERAL) | (1L << INT_HEX_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << OPEN_PARENTHESIS) | (1L << BANG) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 276; methodCallParams();
				}
			}

			State = 279; Match(CLOSE_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewCallExpressionContext : ExpressionContext {
		public NewCallContext newCall() {
			return GetRuleContext<NewCallContext>(0);
		}
		public NewCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNewCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNewCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken rightIdentifier;
		public MethodCallContext rightMethodCall;
		public ITerminalNode DOT() { return GetToken(DoshikParser.DOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public DotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(DoshikParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(DoshikParser.SUB, 0); }
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPrefixExpressionContext : ExpressionContext {
		public IToken prefix;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(DoshikParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(DoshikParser.SUB, 0); }
		public ITerminalNode INC() { return GetToken(DoshikParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(DoshikParser.DEC, 0); }
		public UnaryPrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterUnaryPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitUnaryPrefixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPrefixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultOfTypeExpressionContext : ExpressionContext {
		public DefaultOfTypeContext defaultOfType() {
			return GetRuleContext<DefaultOfTypeContext>(0);
		}
		public DefaultOfTypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterDefaultOfTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitDefaultOfTypeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultOfTypeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MethodCallExpressionContext : ExpressionContext {
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MethodCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMethodCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMethodCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(DoshikParser.ASSIGN, 0); }
		public ITerminalNode ADD_ASSIGN() { return GetToken(DoshikParser.ADD_ASSIGN, 0); }
		public ITerminalNode SUB_ASSIGN() { return GetToken(DoshikParser.SUB_ASSIGN, 0); }
		public ITerminalNode MUL_ASSIGN() { return GetToken(DoshikParser.MUL_ASSIGN, 0); }
		public ITerminalNode DIV_ASSIGN() { return GetToken(DoshikParser.DIV_ASSIGN, 0); }
		public ITerminalNode MOD_ASSIGN() { return GetToken(DoshikParser.MOD_ASSIGN, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OPEN_BRACKET() { return GetToken(DoshikParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(DoshikParser.CLOSE_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BracketsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterBracketsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitBracketsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ITerminalNode BANG() { return GetToken(DoshikParser.BANG, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(DoshikParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(DoshikParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(DoshikParser.MOD, 0); }
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPostfixExpressionContext : ExpressionContext {
		public IToken postfix;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(DoshikParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(DoshikParser.DEC, 0); }
		public UnaryPostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterUnaryPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitUnaryPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeDotExpressionContext : ExpressionContext {
		public TypeTypeContext left;
		public IToken rightIdentifier;
		public MethodCallContext rightMethodCall;
		public ITerminalNode DOT() { return GetToken(DoshikParser.DOT, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public TypeDotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeDotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelativeExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LE() { return GetToken(DoshikParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(DoshikParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(DoshikParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(DoshikParser.LT, 0); }
		public RelativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterRelativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitRelativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseExpressionContext : ExpressionContext {
		public ExpressionContext condition;
		public ExpressionContext trueExpression;
		public ExpressionContext falseExpression;
		public ITerminalNode QUESTION() { return GetToken(DoshikParser.QUESTION, 0); }
		public ITerminalNode COLON() { return GetToken(DoshikParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfElseExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterIfElseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitIfElseExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(DoshikParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(DoshikParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken @operator;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(DoshikParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(DoshikParser.NOTEQUAL, 0); }
		public EqualsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterEqualsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitEqualsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypecastExpressionContext : ExpressionContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypecastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypecastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypecastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypecastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 282; primary();
				}
				break;
			case 2:
				{
				_localctx = new TypeDotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 283; ((TypeDotExpressionContext)_localctx).left = typeType();
				State = 284; Match(DOT);
				State = 287;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 285; ((TypeDotExpressionContext)_localctx).rightIdentifier = Match(IDENTIFIER);
					}
					break;
				case 2:
					{
					State = 286; ((TypeDotExpressionContext)_localctx).rightMethodCall = methodCall();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new DefaultOfTypeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 289; defaultOfType();
				}
				break;
			case 4:
				{
				_localctx = new MethodCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 290; methodCall();
				}
				break;
			case 5:
				{
				_localctx = new NewCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 291; newCall();
				}
				break;
			case 6:
				{
				_localctx = new TypecastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 292; Match(OPEN_PARENTHESIS);
				State = 293; typeType();
				State = 294; Match(CLOSE_PARENTHESIS);
				State = 295; expression(12);
				}
				break;
			case 7:
				{
				_localctx = new UnaryPrefixExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 297;
				((UnaryPrefixExpressionContext)_localctx).prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0)) ) {
					((UnaryPrefixExpressionContext)_localctx).prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 298; expression(10);
				}
				break;
			case 8:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 299; Match(BANG);
				State = 300; expression(9);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 343;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicationExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 304;
						((MultiplicationExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MultiplicationExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 305; ((MultiplicationExpressionContext)_localctx).right = expression(9);
						}
						break;
					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AdditionExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 306;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 307;
						((AdditionExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AdditionExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 308; ((AdditionExpressionContext)_localctx).right = expression(8);
						}
						break;
					case 3:
						{
						_localctx = new RelativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((RelativeExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 309;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 310;
						((RelativeExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << LE) | (1L << GE))) != 0)) ) {
							((RelativeExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 311; ((RelativeExpressionContext)_localctx).right = expression(7);
						}
						break;
					case 4:
						{
						_localctx = new EqualsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 312;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 313;
						((EqualsExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							((EqualsExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 314; ((EqualsExpressionContext)_localctx).right = expression(6);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AndExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 315;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 316; Match(AND);
						State = 317; ((AndExpressionContext)_localctx).right = expression(5);
						}
						break;
					case 6:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((OrExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 318;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 319; Match(OR);
						State = 320; ((OrExpressionContext)_localctx).right = expression(4);
						}
						break;
					case 7:
						{
						_localctx = new IfElseExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((IfElseExpressionContext)_localctx).condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 321;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 322; Match(QUESTION);
						State = 323; ((IfElseExpressionContext)_localctx).trueExpression = expression(0);
						State = 324; Match(COLON);
						State = 325; ((IfElseExpressionContext)_localctx).falseExpression = expression(2);
						}
						break;
					case 8:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 327;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 328;
						((AssignmentExpressionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << ADD_ASSIGN) | (1L << SUB_ASSIGN) | (1L << MUL_ASSIGN) | (1L << DIV_ASSIGN) | (1L << MOD_ASSIGN))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 329; ((AssignmentExpressionContext)_localctx).right = expression(1);
						}
						break;
					case 9:
						{
						_localctx = new DotExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((DotExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 330;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 331; Match(DOT);
						State = 334;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
						case 1:
							{
							State = 332; ((DotExpressionContext)_localctx).rightIdentifier = Match(IDENTIFIER);
							}
							break;
						case 2:
							{
							State = 333; ((DotExpressionContext)_localctx).rightMethodCall = methodCall();
							}
							break;
						}
						}
						break;
					case 10:
						{
						_localctx = new BracketsExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BracketsExpressionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 336;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 337; Match(OPEN_BRACKET);
						State = 338; ((BracketsExpressionContext)_localctx).right = expression(0);
						State = 339; Match(CLOSE_BRACKET);
						}
						break;
					case 11:
						{
						_localctx = new UnaryPostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 341;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 342;
						((UnaryPostfixExpressionContext)_localctx).postfix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==INC || _la==DEC) ) {
							((UnaryPostfixExpressionContext)_localctx).postfix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryContext {
		public ITerminalNode IDENTIFIER() { return GetToken(DoshikParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : PrimaryContext {
		public ITerminalNode OPEN_PARENTHESIS() { return GetToken(DoshikParser.OPEN_PARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENTHESIS() { return GetToken(DoshikParser.CLOSE_PARENTHESIS, 0); }
		public ParenthesisExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 58, RULE_primary);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENTHESIS:
				_localctx = new ParenthesisExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; Match(OPEN_PARENTHESIS);
				State = 349; expression(0);
				State = 350; Match(CLOSE_PARENTHESIS);
				}
				break;
			case INT_LITERAL:
			case INT_HEX_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 352; literal();
				}
				break;
			case IDENTIFIER:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 353; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode[] OPEN_BRACKET() { return GetTokens(DoshikParser.OPEN_BRACKET); }
		public ITerminalNode OPEN_BRACKET(int i) {
			return GetToken(DoshikParser.OPEN_BRACKET, i);
		}
		public ITerminalNode[] CLOSE_BRACKET() { return GetTokens(DoshikParser.CLOSE_BRACKET); }
		public ITerminalNode CLOSE_BRACKET(int i) {
			return GetToken(DoshikParser.CLOSE_BRACKET, i);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 60, RULE_typeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 356; classOrInterfaceType();
				}
				break;
			case INT:
			case FLOAT:
			case BOOL:
			case STRING:
			case OBJECT:
				{
				State = 357; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPEN_BRACKET) {
				{
				{
				State = 360; Match(OPEN_BRACKET);
				State = 361; Match(CLOSE_BRACKET);
				}
				}
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(DoshikParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(DoshikParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(DoshikParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(DoshikParser.STRING, 0); }
		public ITerminalNode OBJECT() { return GetToken(DoshikParser.OBJECT, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << OBJECT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(DoshikParser.LT, 0); }
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public ITerminalNode GT() { return GetToken(DoshikParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(DoshikParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DoshikParser.COMMA, i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDoshikParserListener typedListener = listener as IDoshikParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDoshikParserVisitor<TResult> typedVisitor = visitor as IDoshikParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(LT);
			State = 370; typeArgument();
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 371; Match(COMMA);
				State = 372; typeArgument();
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 378; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		case 8: return Precpred(Context, 17);
		case 9: return Precpred(Context, 16);
		case 10: return Precpred(Context, 11);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x17F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x3', 
		'\x2', '\a', '\x2', '\x46', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'I', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'O', '\n', '\x3', '\x3', '\x4', '\x5', '\x4', 'R', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '[', '\n', '\x5', '\x3', '\x6', 
		'\x5', '\x6', '^', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'g', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'k', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'q', '\n', '\t', 
		'\f', '\t', '\xE', '\t', 't', '\v', '\t', '\x3', '\t', '\x5', '\t', 'w', 
		'\n', '\t', '\x5', '\t', 'y', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x7F', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x84', '\n', '\n', '\a', '\n', '\x86', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x89', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x8F', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', 
		'\r', '\x96', '\n', '\r', '\f', '\r', '\xE', '\r', '\x99', '\v', '\r', 
		'\x3', '\xE', '\x5', '\xE', '\x9C', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xA6', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xAC', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\xAF', '\v', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\xB7', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xC2', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xD0', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xDB', '\n', '\x14', 
		'\x3', '\x15', '\x5', '\x15', '\xDE', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xE2', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xE6', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\xEA', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\xF3', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\xF6', '\v', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xFF', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x103', '\n', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x10A', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x10D', '\v', '\x1B', 
		'\x3', '\x1C', '\x5', '\x1C', '\x110', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x118', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x122', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x130', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x151', '\n', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x15A', '\n', '\x1E', 
		'\f', '\x1E', '\xE', '\x1E', '\x15D', '\v', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x165', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x169', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x16D', '\n', ' ', '\f', 
		' ', '\xE', ' ', '\x170', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x178', '\n', '\"', 
		'\f', '\"', '\xE', '\"', '\x17B', '\v', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x2', '\x3', ':', '#', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x2', '\f', '\x3', '\x2', '\x6', 
		'\a', '\x3', '\x2', '\x16', '\x17', '\x3', '\x2', '\x37', ':', '\x3', 
		'\x2', ';', '=', '\x3', '\x2', '\x39', ':', '\x4', '\x2', ',', '-', '\x32', 
		'\x33', '\x4', '\x2', '\x31', '\x31', '\x34', '\x34', '\x3', '\x2', '&', 
		'+', '\x3', '\x2', '\x37', '\x38', '\x3', '\x2', '\x10', '\x14', '\x2', 
		'\x1A0', '\x2', 'G', '\x3', '\x2', '\x2', '\x2', '\x4', 'N', '\x3', '\x2', 
		'\x2', '\x2', '\x6', 'Q', '\x3', '\x2', '\x2', '\x2', '\b', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\n', ']', '\x3', '\x2', '\x2', '\x2', '\f', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'j', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'l', '\x3', '\x2', '\x2', '\x2', '\x12', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x92', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xA7', '\x3', '\x2', '\x2', '\x2', ' ', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xB6', '\x3', '\x2', '\x2', '\x2', '$', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xDA', '\x3', '\x2', '\x2', '\x2', '(', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xE9', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '.', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x32', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x106', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x38', '\x113', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x12F', '\x3', '\x2', '\x2', '\x2', '<', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x168', '\x3', '\x2', '\x2', '\x2', '@', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x46', '\x5', '\x4', '\x3', '\x2', '\x45', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', 
		'\x2', '\x2', '\x3', 'K', '\x3', '\x3', '\x2', '\x2', '\x2', 'L', 'O', 
		'\x5', '\x6', '\x4', '\x2', 'M', 'O', '\x5', '\n', '\x6', '\x2', 'N', 
		'L', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', '\x5', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\a', '\x5', '\x2', 
		'\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x5', '\b', '\x5', 
		'\x2', 'T', 'U', '\a', '\x41', '\x2', '\x2', 'U', 'V', '\x5', '\x16', 
		'\f', '\x2', 'V', 'W', '\x5', ' ', '\x11', '\x2', 'W', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'X', '[', '\x5', '>', ' ', '\x2', 'Y', '[', '\a', '\x15', 
		'\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '[', '\t', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\t', 
		'\x2', '\x2', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', ']', '^', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x5', '>', ' ', '\x2', '`', '\x61', '\x5', '\f', '\a', '\x2', '\x61', 
		'\x62', '\a', '\x1E', '\x2', '\x2', '\x62', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x66', '\a', '\x41', '\x2', '\x2', '\x64', '\x65', '\a', 
		'&', '\x2', '\x2', '\x65', 'g', '\x5', '\xE', '\b', '\x2', '\x66', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'h', 'k', '\x5', '\x10', '\t', '\x2', 
		'i', 'k', '\x5', ':', '\x1E', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'x', '\a', '\"', '\x2', '\x2', 'm', 'r', '\x5', '\xE', '\b', 
		'\x2', 'n', 'o', '\a', '\x1F', '\x2', '\x2', 'o', 'q', '\x5', '\xE', '\b', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', 
		'\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\a', '\x1F', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'm', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '#', '\x2', 
		'\x2', '{', '\x11', '\x3', '\x2', '\x2', '\x2', '|', '~', '\a', '\x41', 
		'\x2', '\x2', '}', '\x7F', '\x5', '\x42', '\"', '\x2', '~', '}', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\a', '\x1C', '\x2', 
		'\x2', '\x81', '\x83', '\a', '\x41', '\x2', '\x2', '\x82', '\x84', '\x5', 
		'\x42', '\"', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x80', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x5', 
		'>', ' ', '\x2', '\x8B', '\x15', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', 
		'\a', ' ', '\x2', '\x2', '\x8D', '\x8F', '\x5', '\x18', '\r', '\x2', '\x8E', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', 
		'!', '\x2', '\x2', '\x91', '\x17', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x97', '\x5', '\x1A', '\xE', '\x2', '\x93', '\x94', '\a', '\x1F', '\x2', 
		'\x2', '\x94', '\x96', '\x5', '\x1A', '\xE', '\x2', '\x95', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x99', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x19', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9C', '\a', '\b', '\x2', '\x2', '\x9B', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', 
		'>', ' ', '\x2', '\x9E', '\x9F', '\a', '\x41', '\x2', '\x2', '\x9F', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA6', '\x5', '\x1E', '\x10', '\x2', 
		'\xA1', '\xA6', '\a', '\x18', '\x2', '\x2', '\xA2', '\xA6', '\a', '\x1A', 
		'\x2', '\x2', '\xA3', '\xA6', '\a', '\x19', '\x2', '\x2', '\xA4', '\xA6', 
		'\a', '\x1B', '\x2', '\x2', '\xA5', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA8', '\t', '\x3', '\x2', '\x2', '\xA8', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAD', '\a', '\"', '\x2', '\x2', '\xAA', '\xAC', 
		'\x5', '\"', '\x12', '\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\xB1', '\a', '#', '\x2', '\x2', '\xB1', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\x5', '$', '\x13', '\x2', '\xB3', '\xB4', '\a', 
		'\x1E', '\x2', '\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB7', '\x5', '&', '\x14', '\x2', '\xB6', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\x5', '>', ' ', '\x2', '\xB9', '\xBA', 
		'\x5', '\f', '\a', '\x2', '\xBA', '%', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xDB', '\x5', ' ', '\x11', '\x2', '\xBC', '\xBD', '\a', '\t', '\x2', 
		'\x2', '\xBD', '\xBE', '\x5', ',', '\x17', '\x2', '\xBE', '\xC1', '\x5', 
		'&', '\x14', '\x2', '\xBF', '\xC0', '\a', '\n', '\x2', '\x2', '\xC0', 
		'\xC2', '\x5', '&', '\x14', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\a', '\f', '\x2', '\x2', '\xC4', 
		'\xC5', '\a', ' ', '\x2', '\x2', '\xC5', '\xC6', '\x5', '(', '\x15', '\x2', 
		'\xC6', '\xC7', '\a', '!', '\x2', '\x2', '\xC7', '\xC8', '\x5', '&', '\x14', 
		'\x2', '\xC8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', 
		'\v', '\x2', '\x2', '\xCA', '\xCB', '\x5', ',', '\x17', '\x2', '\xCB', 
		'\xCC', '\x5', '&', '\x14', '\x2', '\xCC', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCF', '\a', '\xF', '\x2', '\x2', '\xCE', '\xD0', '\x5', 
		':', '\x1E', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xDB', '\a', '\x1E', '\x2', '\x2', '\xD2', '\xD3', '\a', 
		'\r', '\x2', '\x2', '\xD3', '\xDB', '\a', '\x1E', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\xE', '\x2', '\x2', '\xD5', '\xDB', '\a', '\x1E', '\x2', 
		'\x2', '\xD6', '\xDB', '\a', '\x1E', '\x2', '\x2', '\xD7', '\xD8', '\x5', 
		':', '\x1E', '\x2', '\xD8', '\xD9', '\a', '\x1E', '\x2', '\x2', '\xD9', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x5', '*', '\x16', 
		'\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE1', '\a', '\x1E', '\x2', '\x2', '\xE0', '\xE2', '\x5', ':', '\x1E', 
		'\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE5', '\a', '\x1E', '\x2', '\x2', '\xE4', '\xE6', '\x5', '.', '\x18', 
		'\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', ')', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xEA', '\x5', '$', '\x13', '\x2', '\xE8', '\xEA', '\x5', '.', '\x18', 
		'\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '+', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xEC', '\a', ' ', '\x2', '\x2', '\xEC', '\xED', '\x5', ':', '\x1E', '\x2', 
		'\xED', '\xEE', '\a', '!', '\x2', '\x2', '\xEE', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF4', '\x5', ':', '\x1E', '\x2', '\xF0', '\xF1', '\a', 
		'\x1F', '\x2', '\x2', '\xF1', '\xF3', '\x5', ':', '\x1E', '\x2', '\xF2', 
		'\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '/', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', '\x3', '\x2', 
		'\x2', '\xF8', '\xF9', '\a', ' ', '\x2', '\x2', '\xF9', '\xFA', '\x5', 
		'>', ' ', '\x2', '\xFA', '\xFB', '\a', '!', '\x2', '\x2', '\xFB', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\a', '\x41', '\x2', '\x2', 
		'\xFD', '\xFF', '\x5', '\x42', '\"', '\x2', '\xFE', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x102', '\a', ' ', '\x2', '\x2', 
		'\x101', '\x103', '\x5', '\x34', '\x1B', '\x2', '\x102', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', '!', '\x2', 
		'\x2', '\x105', '\x33', '\x3', '\x2', '\x2', '\x2', '\x106', '\x10B', 
		'\x5', '\x36', '\x1C', '\x2', '\x107', '\x108', '\a', '\x1F', '\x2', '\x2', 
		'\x108', '\x10A', '\x5', '\x36', '\x1C', '\x2', '\x109', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x35', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x110', '\a', '\b', '\x2', '\x2', 
		'\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x112', '\x5', ':', '\x1E', '\x2', '\x112', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\a', '\x4', '\x2', '\x2', '\x114', '\x115', 
		'\x5', '>', ' ', '\x2', '\x115', '\x117', '\a', ' ', '\x2', '\x2', '\x116', 
		'\x118', '\x5', '\x34', '\x1B', '\x2', '\x117', '\x116', '\x3', '\x2', 
		'\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\a', '!', '\x2', '\x2', 
		'\x11A', '\x39', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\b', '\x1E', 
		'\x1', '\x2', '\x11C', '\x130', '\x5', '<', '\x1F', '\x2', '\x11D', '\x11E', 
		'\x5', '>', ' ', '\x2', '\x11E', '\x121', '\a', '\x1D', '\x2', '\x2', 
		'\x11F', '\x122', '\a', '\x41', '\x2', '\x2', '\x120', '\x122', '\x5', 
		'\x32', '\x1A', '\x2', '\x121', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x130', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x130', '\x5', '\x30', '\x19', '\x2', '\x124', '\x130', 
		'\x5', '\x32', '\x1A', '\x2', '\x125', '\x130', '\x5', '\x38', '\x1D', 
		'\x2', '\x126', '\x127', '\a', ' ', '\x2', '\x2', '\x127', '\x128', '\x5', 
		'>', ' ', '\x2', '\x128', '\x129', '\a', '!', '\x2', '\x2', '\x129', '\x12A', 
		'\x5', ':', '\x1E', '\xE', '\x12A', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x12B', '\x12C', '\t', '\x4', '\x2', '\x2', '\x12C', '\x130', '\x5', 
		':', '\x1E', '\f', '\x12D', '\x12E', '\a', '.', '\x2', '\x2', '\x12E', 
		'\x130', '\x5', ':', '\x1E', '\v', '\x12F', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x125', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x132', '\f', '\n', '\x2', '\x2', '\x132', '\x133', '\t', 
		'\x5', '\x2', '\x2', '\x133', '\x15A', '\x5', ':', '\x1E', '\v', '\x134', 
		'\x135', '\f', '\t', '\x2', '\x2', '\x135', '\x136', '\t', '\x6', '\x2', 
		'\x2', '\x136', '\x15A', '\x5', ':', '\x1E', '\n', '\x137', '\x138', '\f', 
		'\b', '\x2', '\x2', '\x138', '\x139', '\t', '\a', '\x2', '\x2', '\x139', 
		'\x15A', '\x5', ':', '\x1E', '\t', '\x13A', '\x13B', '\f', '\a', '\x2', 
		'\x2', '\x13B', '\x13C', '\t', '\b', '\x2', '\x2', '\x13C', '\x15A', '\x5', 
		':', '\x1E', '\b', '\x13D', '\x13E', '\f', '\x6', '\x2', '\x2', '\x13E', 
		'\x13F', '\a', '\x35', '\x2', '\x2', '\x13F', '\x15A', '\x5', ':', '\x1E', 
		'\a', '\x140', '\x141', '\f', '\x5', '\x2', '\x2', '\x141', '\x142', '\a', 
		'\x36', '\x2', '\x2', '\x142', '\x15A', '\x5', ':', '\x1E', '\x6', '\x143', 
		'\x144', '\f', '\x4', '\x2', '\x2', '\x144', '\x145', '\a', '/', '\x2', 
		'\x2', '\x145', '\x146', '\x5', ':', '\x1E', '\x2', '\x146', '\x147', 
		'\a', '\x30', '\x2', '\x2', '\x147', '\x148', '\x5', ':', '\x1E', '\x4', 
		'\x148', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\f', 
		'\x3', '\x2', '\x2', '\x14A', '\x14B', '\t', '\t', '\x2', '\x2', '\x14B', 
		'\x15A', '\x5', ':', '\x1E', '\x3', '\x14C', '\x14D', '\f', '\x13', '\x2', 
		'\x2', '\x14D', '\x150', '\a', '\x1D', '\x2', '\x2', '\x14E', '\x151', 
		'\a', '\x41', '\x2', '\x2', '\x14F', '\x151', '\x5', '\x32', '\x1A', '\x2', 
		'\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x153', '\f', '\x12', '\x2', '\x2', '\x153', '\x154', '\a', '$', '\x2', 
		'\x2', '\x154', '\x155', '\x5', ':', '\x1E', '\x2', '\x155', '\x156', 
		'\a', '%', '\x2', '\x2', '\x156', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x158', '\f', '\r', '\x2', '\x2', '\x158', '\x15A', '\t', '\n', 
		'\x2', '\x2', '\x159', '\x131', '\x3', '\x2', '\x2', '\x2', '\x159', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x159', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x140', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x159', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x159', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		';', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\a', ' ', '\x2', '\x2', '\x15F', '\x160', '\x5', 
		':', '\x1E', '\x2', '\x160', '\x161', '\a', '!', '\x2', '\x2', '\x161', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x162', '\x165', '\x5', '\x1C', 
		'\xF', '\x2', '\x163', '\x165', '\a', '\x41', '\x2', '\x2', '\x164', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x163', '\x3', '\x2', '\x2', '\x2', '\x165', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x166', '\x169', '\x5', '\x12', '\n', '\x2', '\x167', '\x169', 
		'\x5', '@', '!', '\x2', '\x168', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16B', '\a', '$', '\x2', '\x2', '\x16B', 
		'\x16D', '\a', '%', '\x2', '\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x170', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '?', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', '\x3', '\x2', 
		'\x2', '\x2', '\x171', '\x172', '\t', '\v', '\x2', '\x2', '\x172', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\a', '-', '\x2', '\x2', 
		'\x174', '\x179', '\x5', '\x14', '\v', '\x2', '\x175', '\x176', '\a', 
		'\x1F', '\x2', '\x2', '\x176', '\x178', '\x5', '\x14', '\v', '\x2', '\x177', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17B', '\x3', '\x2', '\x2', 
		'\x2', '\x179', '\x177', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17D', '\a', 
		',', '\x2', '\x2', '\x17D', '\x43', '\x3', '\x2', '\x2', '\x2', '+', 'G', 
		'N', 'Q', 'Z', ']', '\x66', 'j', 'r', 'v', 'x', '~', '\x83', '\x87', '\x8E', 
		'\x97', '\x9B', '\xA5', '\xAD', '\xB6', '\xC1', '\xCF', '\xDA', '\xDD', 
		'\xE1', '\xE5', '\xE9', '\xF4', '\xFE', '\x102', '\x10B', '\x10F', '\x117', 
		'\x121', '\x12F', '\x150', '\x159', '\x15B', '\x164', '\x168', '\x16E', 
		'\x179',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
