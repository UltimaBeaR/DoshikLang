//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Programs\DoshikLang\DoshikLangAntlr\Doshik.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class DoshikLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OR=1, AND=2, EQUALS=3, NOT_EQUALS=4, GREATER_THEN=5, LESSER_THEN=6, GREATER_THEN_OR_EQUALS=7, 
		LESSER_THEN_OR_EQUALS=8, PLUS=9, MINUS=10, MULTIPLY=11, DIVIDE=12, NOT=13, 
		SEMICOLON=14, ASSIGN=15, OPEN_PARENTHESIS=16, CLOSE_PARENTHESIS=17, OPEN_CURLY_BRACE=18, 
		CLOSE_CURLY_BRACE=19, VOID_KEYWORD=20, IF_KEYWORD=21, ELSE_KEYWORD=22, 
		WHILE_KEYWORD=23, NULL_LITERAL=24, BOOL_LITERAL=25, INT_LITERAL=26, FLOAT_LITERAL=27, 
		STRING_LITERAL=28, COMMENT=29, WHITESPACE=30, IDENTIFIER=31;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OR", "AND", "EQUALS", "NOT_EQUALS", "GREATER_THEN", "LESSER_THEN", "GREATER_THEN_OR_EQUALS", 
		"LESSER_THEN_OR_EQUALS", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "NOT", 
		"SEMICOLON", "ASSIGN", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", "OPEN_CURLY_BRACE", 
		"CLOSE_CURLY_BRACE", "VOID_KEYWORD", "IF_KEYWORD", "ELSE_KEYWORD", "WHILE_KEYWORD", 
		"NULL_LITERAL", "BOOL_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", 
		"COMMENT", "WHITESPACE", "IDENTIFIER"
	};


	public DoshikLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DoshikLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'!'", "';'", "'='", "'('", "')'", "'{'", "'}'", 
		"'void'", "'if'", "'else'", "'while'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQUALS", "NOT_EQUALS", "GREATER_THEN", "LESSER_THEN", 
		"GREATER_THEN_OR_EQUALS", "LESSER_THEN_OR_EQUALS", "PLUS", "MINUS", "MULTIPLY", 
		"DIVIDE", "NOT", "SEMICOLON", "ASSIGN", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", "VOID_KEYWORD", "IF_KEYWORD", 
		"ELSE_KEYWORD", "WHILE_KEYWORD", "NULL_LITERAL", "BOOL_LITERAL", "INT_LITERAL", 
		"FLOAT_LITERAL", "STRING_LITERAL", "COMMENT", "WHITESPACE", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Doshik.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DoshikLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '!', '\xC8', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x8F', '\n', '\x1A', '\x3', '\x1B', 
		'\x6', '\x1B', '\x92', '\n', '\x1B', '\r', '\x1B', '\xE', '\x1B', '\x93', 
		'\x3', '\x1C', '\x6', '\x1C', '\x97', '\n', '\x1C', '\r', '\x1C', '\xE', 
		'\x1C', '\x98', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x9D', '\n', 
		'\x1C', '\f', '\x1C', '\xE', '\x1C', '\xA0', '\v', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x6', '\x1C', '\xA4', '\n', '\x1C', '\r', '\x1C', '\xE', 
		'\x1C', '\xA5', '\x5', '\x1C', '\xA8', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\xAE', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\xB1', '\v', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\xB7', '\n', '\x1E', 
		'\f', '\x1E', '\xE', '\x1E', '\xBA', '\v', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\a', ' ', '\xC4', '\n', ' ', '\f', ' ', '\xE', ' ', 
		'\xC7', '\v', ' ', '\x2', '\x2', '!', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', 
		'\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', 
		'\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', '%', '\x14', 
		'\'', '\x15', ')', '\x16', '+', '\x17', '-', '\x18', '/', '\x19', '\x31', 
		'\x1A', '\x33', '\x1B', '\x35', '\x1C', '\x37', '\x1D', '\x39', '\x1E', 
		';', '\x1F', '=', ' ', '?', '!', '\x3', '\x2', '\b', '\x3', '\x2', '\x32', 
		';', '\x5', '\x2', '\f', '\f', '\xF', '\xF', '$', '$', '\x4', '\x2', '\f', 
		'\f', '\xF', '\xF', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', 
		'\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', 
		'\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x2', '\xD1', 
		'\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x2', 
		')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x2', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x31', '\x3', '\x2', '\x2', '\x2', '\x2', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x35', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x2', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x2', ';', '\x3', '\x2', '\x2', '\x2', '\x2', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '?', '\x3', '\x2', '\x2', '\x2', '\x3', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x44', '\x3', '\x2', '\x2', '\x2', '\a', 
		'G', '\x3', '\x2', '\x2', '\x2', '\t', 'J', '\x3', '\x2', '\x2', '\x2', 
		'\v', 'M', '\x3', '\x2', '\x2', '\x2', '\r', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\xF', 'Q', '\x3', '\x2', '\x2', '\x2', '\x11', 'T', '\x3', '\x2', 
		'\x2', '\x2', '\x13', 'W', '\x3', '\x2', '\x2', '\x2', '\x15', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '[', '\x3', '\x2', '\x2', '\x2', '\x19', 
		']', '\x3', '\x2', '\x2', '\x2', '\x1B', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '\x61', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x65', '\x3', '\x2', '\x2', '\x2', '#', 'g', '\x3', 
		'\x2', '\x2', '\x2', '%', 'i', '\x3', '\x2', '\x2', '\x2', '\'', 'k', 
		'\x3', '\x2', '\x2', '\x2', ')', 'm', '\x3', '\x2', '\x2', '\x2', '+', 
		'r', '\x3', '\x2', '\x2', '\x2', '-', 'u', '\x3', '\x2', '\x2', '\x2', 
		'/', 'z', '\x3', '\x2', '\x2', '\x2', '\x31', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x35', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', ';', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '=', '\xBD', '\x3', '\x2', '\x2', '\x2', '?', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\a', '~', '\x2', '\x2', '\x42', '\x43', 
		'\a', '~', '\x2', '\x2', '\x43', '\x4', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\a', '(', '\x2', '\x2', '\x45', '\x46', '\a', '(', '\x2', '\x2', 
		'\x46', '\x6', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '?', '\x2', 
		'\x2', 'H', 'I', '\a', '?', '\x2', '\x2', 'I', '\b', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'K', '\a', '#', '\x2', '\x2', 'K', 'L', '\a', '?', '\x2', 
		'\x2', 'L', '\n', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '@', '\x2', 
		'\x2', 'N', '\f', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '>', '\x2', 
		'\x2', 'P', '\xE', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '@', '\x2', 
		'\x2', 'R', 'S', '\a', '?', '\x2', '\x2', 'S', '\x10', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '>', '\x2', '\x2', 'U', 'V', '\a', '?', '\x2', 
		'\x2', 'V', '\x12', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '-', '\x2', 
		'\x2', 'X', '\x14', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\a', '/', '\x2', 
		'\x2', 'Z', '\x16', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', ',', 
		'\x2', '\x2', '\\', '\x18', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', 
		'\x31', '\x2', '\x2', '^', '\x1A', '\x3', '\x2', '\x2', '\x2', '_', '`', 
		'\a', '#', '\x2', '\x2', '`', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\a', '=', '\x2', '\x2', '\x62', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\a', '?', '\x2', '\x2', '\x64', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\a', '*', '\x2', '\x2', '\x66', '\"', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\a', '+', '\x2', '\x2', 'h', '$', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\a', '}', '\x2', '\x2', 'j', '&', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\a', '\x7F', '\x2', '\x2', 'l', '(', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'n', '\a', 'x', '\x2', '\x2', 'n', 'o', '\a', 
		'q', '\x2', '\x2', 'o', 'p', '\a', 'k', '\x2', '\x2', 'p', 'q', '\a', 
		'\x66', '\x2', '\x2', 'q', '*', '\x3', '\x2', '\x2', '\x2', 'r', 's', 
		'\a', 'k', '\x2', '\x2', 's', 't', '\a', 'h', '\x2', '\x2', 't', ',', 
		'\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', 'g', '\x2', '\x2', 'v', 'w', 
		'\a', 'n', '\x2', '\x2', 'w', 'x', '\a', 'u', '\x2', '\x2', 'x', 'y', 
		'\a', 'g', '\x2', '\x2', 'y', '.', '\x3', '\x2', '\x2', '\x2', 'z', '{', 
		'\a', 'y', '\x2', '\x2', '{', '|', '\a', 'j', '\x2', '\x2', '|', '}', 
		'\a', 'k', '\x2', '\x2', '}', '~', '\a', 'n', '\x2', '\x2', '~', '\x7F', 
		'\a', 'g', '\x2', '\x2', '\x7F', '\x30', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\a', 'p', '\x2', '\x2', '\x81', '\x82', '\a', 'w', '\x2', '\x2', 
		'\x82', '\x83', '\a', 'n', '\x2', '\x2', '\x83', '\x84', '\a', 'n', '\x2', 
		'\x2', '\x84', '\x32', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', 
		'v', '\x2', '\x2', '\x86', '\x87', '\a', 't', '\x2', '\x2', '\x87', '\x88', 
		'\a', 'w', '\x2', '\x2', '\x88', '\x8F', '\a', 'g', '\x2', '\x2', '\x89', 
		'\x8A', '\a', 'h', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x63', '\x2', 
		'\x2', '\x8B', '\x8C', '\a', 'n', '\x2', '\x2', '\x8C', '\x8D', '\a', 
		'u', '\x2', '\x2', '\x8D', '\x8F', '\a', 'g', '\x2', '\x2', '\x8E', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x34', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\t', '\x2', 
		'\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x97', '\t', '\x2', '\x2', '\x2', '\x96', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9E', 
		'\a', '\x30', '\x2', '\x2', '\x9B', '\x9D', '\t', '\x2', '\x2', '\x2', 
		'\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\a', '\x30', 
		'\x2', '\x2', '\xA2', '\xA4', '\t', '\x2', '\x2', '\x2', '\xA3', '\xA2', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x38', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAF', '\a', '$', 
		'\x2', '\x2', '\xAA', '\xAE', '\n', '\x3', '\x2', '\x2', '\xAB', '\xAC', 
		'\a', '$', '\x2', '\x2', '\xAC', '\xAE', '\a', '$', '\x2', '\x2', '\xAD', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', '$', '\x2', '\x2', '\xB3', ':', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB8', '\a', '%', '\x2', '\x2', '\xB5', '\xB7', 
		'\n', '\x4', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xBC', '\b', '\x1E', '\x2', '\x2', '\xBC', '<', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBE', '\t', '\x5', '\x2', '\x2', '\xBE', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\b', '\x1F', '\x2', '\x2', 
		'\xC0', '>', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC5', '\t', '\x6', 
		'\x2', '\x2', '\xC2', '\xC4', '\t', '\a', '\x2', '\x2', '\xC3', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '@', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x2', '\x8E', '\x93', '\x98', '\x9E', 
		'\xA5', '\xA7', '\xAD', '\xAF', '\xB8', '\xC5', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
